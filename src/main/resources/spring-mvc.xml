<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                            http://www.springframework.org/schema/context  
                            http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                            http://www.springframework.org/schema/mvc  
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.ht.controller" />
	<!-- 允许对静态资源文件的访问 -->
	<mvc:default-servlet-handler />
	<!-- 静态资源映射 -->
	<mvc:resources location="/WEB-INF/css/" mapping="css/**" />
	<mvc:resources location="/WEB-INF/js/" mapping="js/**" />
	<mvc:resources location="/WEB-INF/fonts/" mapping="fonts/**" />
	<mvc:resources location="/WEB-INF/lib/" mapping="lib/**" />

	<!-- 添加注解驱动 -->
	<mvc:annotation-driven enable-matrix-variables="true" />

	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- 结果数据支持String，但是这个解析器一定要放在JSON解析器前 -->
				<ref bean="stringHttpMessageConverter" />
				<!-- JSON解析：结果数据支持(fastjson) -->
				<ref bean="fastJsonHttpMessageConverter" />
				<!-- JSON解析：结果数据支持(jackson) -->
				<!--  <ref bean="mappingJacksonHttpMessageConverter" /> -->
			</list>
		</property>
	</bean>

	<!-- String转化器 -->
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<!-- 这里顺序一定不能反，一定先写text/html,否则IE下出现下载提示 -->
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- JSON转化器(jackson版本) -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper">
			<!-- <bean class="com.threeStepTech.ObjectMapper.CustomObjectMapper"/> -->
			<bean class="com.fasterxml.jackson.databind.ObjectMapper">
				<property name="dateFormat">
					<bean class="java.text.SimpleDateFormat">
						<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
					</bean>
				</property>
				<property name="serializationInclusion">
					<!-- 注入枚举类型,过滤对象，这样JSON中不会输出NULL -->
					<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
				</property>
			</bean>
		</property>
		<property name="supportedMediaTypes">
			<list>
				<!-- 这里顺序一定不能反，一定先写text/html,否则IE下出现下载提示 -->
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- JSON转化器(fastjson版本) -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
		<property name="fastJsonConfig">
			<bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
				<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
				<property name="serializerFeatures">
					<array>
						<!--此配置用于将Date类型转化为dateFormat对应的格式 -->
						<value>WriteDateUseDateFormat</value>
					</array>
				</property>
			</bean>
		</property>
		<property name="supportedMediaTypes">
			<list>
				<!-- 这里顺序一定不能反，一定先写text/html,否则IE下出现下载提示 -->
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 配置启用Shiro的注解功能 
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>-->

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!--重要！将你的SwaggerConfig配置类注入-->
	<bean class="com.ht.utils.SwaggerConfig"/>
	<!--重要！配置swagger资源不被拦截-->
	<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
	<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />

</beans>